<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ikon.Sdk.DotNet</name>
    </assembly>
    <members>
        <member name="T:Ikon.Sdk.DotNet.IIkonClient">
            <summary>
            IIkonClient represents one space and all the channels in it.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.IIkonClient.ClientInfo">
            <summary>
            ClientInfo that was used to create this client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.IIkonClient.Channels">
            <summary>
            All the channels in the space.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.IIkonClient.GetChannelByKey(System.String)">
            <summary>
            Get a channel by its key.
            </summary>
            <param name="key">Key that is set for the channel in the Portal</param>
            <returns>IChannel instance</returns>
        </member>
        <member name="T:Ikon.Sdk.DotNet.AsyncEventHandler`1">
            <summary>
            Generic event handler that can be used to handle events asynchronously.
            </summary>
            <typeparam name="TEventArgs">Event args type</typeparam>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
            <returns></returns>
        </member>
        <member name="T:Ikon.Sdk.DotNet.MessageEventArgs">
            <summary>
            Event arguments for the MessageReceived event.
            </summary>
            <param name="message">Protocol message</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.MessageEventArgs.#ctor(Ikon.Common.Core.Protocol.ProtocolMessage)">
            <summary>
            Event arguments for the MessageReceived event.
            </summary>
            <param name="message">Protocol message</param>
        </member>
        <member name="P:Ikon.Sdk.DotNet.MessageEventArgs.Message">
            <summary>
            Protocol message that was received.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.IChannel">
            <summary>
            IChannel represents a channel in the space.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.IChannel.Key">
            <summary>
            Key that is set for the channel in the Portal.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.IChannel.Title">
            <summary>
            Title that is set for the channel in the Portal.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.IChannel.GlobalState">
            <summary>
            Global state that contains up-to-date information about the active clients and streams in the channel.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.IChannel.ConnectAsync">
            <summary>
            Connect to the Ikon server instance and join the channel.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.IChannel.SignalReady">
            <summary>
            Signal all other clients in the channel that this client is ready.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.IChannel.WaitForAIAgentAsync">
            <summary>
            Wait for the AI agent client to connect to the channel and become ready.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.IChannel.Connecting">
            <summary>
            Event that is triggered before connecting to the channel. Protocol messages cannot be sent or received at this point.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.IChannel.Connected">
            <summary>
            Event that is triggered after successfully connected to the channel. Protocol messages cannot be sent or received at this point.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.IChannel.Joined">
            <summary>
            Event that is triggered after the connection has been authenticated and channel has been joined. Protocol messages can be sent and received at this point.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.IChannel.MessageReceived">
            <summary>
            Event that is triggered when a protocol message is received from the channel.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.IChannel.Stopping">
            <summary>
            Event that is triggered when the connection to the channel is about to be closed. Protocol messages can be sent or received at this point.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.IChannel.Disconnected">
            <summary>
            Event that is triggered after the connection to the channel has been closed. Protocol messages cannot be sent or received at this point.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel">
            <summary>
            An "easy-mode" class that simplifies the interaction with an IChannel instance.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.RegisterFunction``2(System.String,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Register a function that can be called from the LLM shader either as a template function or as a model function.
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="TResult">Type of the return value</typeparam>
            <param name="name">Name of the function</param>
            <param name="callbackAsync">Callback function</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.RegisterFunction``3(System.String,System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Register a function that can be called from the LLM shader either as a template function or as a model function.
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="TResult">Type of the return value</typeparam>
            <param name="name">Name of the function</param>
            <param name="callbackAsync">Callback function</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.RegisterFunction``4(System.String,System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Register a function that can be called from the LLM shader either as a template function or as a model function.
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <typeparam name="TResult">Type of the return value</typeparam>
            <param name="name">Name of the function</param>
            <param name="callbackAsync">Callback function</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.RegisterFunction``5(System.String,System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Register a function that can be called from the LLM shader either as a template function or as a model function.
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <typeparam name="T4">Type of the fourth parameter</typeparam>
            <typeparam name="TResult">Type of the return value</typeparam>
            <param name="name">Name of the function</param>
            <param name="callbackAsync">Callback function</param>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.ConnectedArgs">
            <summary>
            Event arguments for Connected event.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.StoppingArgs">
            <summary>
            Event arguments for Stopping event.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.DisconnectedArgs">
            <summary>
            Event arguments for Disconnected event.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.TextArgs">
            <summary>
            Event arguments for Text event.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.TextArgs.UserId">
            <summary>
            User ID of the sender.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.TextArgs.UserName">
            <summary>
            Username of the sender.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.TextArgs.Text">
            <summary>
            Content of the message.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.AudioStreamBeginArgs">
            <summary>
            Event arguments for AudioStreamBegin event.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioStreamBeginArgs.StreamId">
            <summary>
            Unique identifier of the audio stream.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioStreamBeginArgs.SampleRate">
            <summary>
            Sample rate of the audio stream.
            </summary>
            <remarks>
            Consumer of the event can override this value to change the sample rate of the incoming audio stream (conversion is done by the SDK).
            </remarks>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioStreamBeginArgs.Channels">
            <summary>
            Number of channels in the audio stream.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.AudioFrameArgs">
            <summary>
            Event arguments for AudioFrame event.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioFrameArgs.StreamId">
            <summary>
            Unique identifier of the audio stream.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioFrameArgs.Samples">
            <summary>
            Audio samples in float format.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioFrameArgs.IsFirst">
            <summary>
            Signals, for example, the beginning of a recorded sentence.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioFrameArgs.IsLast">
            <summary>
            Signals, for example, the end of a recorded sentence.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Channel.AudioStreamEndArgs">
            <summary>
            Event arguments for AudioStreamEnd event.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Channel.AudioStreamEndArgs.StreamId">
            <summary>
            Unique identifier of the audio stream.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.Connected">
            <summary>
            Event that is triggered after the channel has been successfully connected and joined.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.Stopping">
            <summary>
            Event that is triggered before leaving the channel.
            </summary>
            <remarks>
            Messages can still be sent in this event.
            </remarks>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.Disconnected">
            <summary>
            Event that is triggered after the connection has been closed.
            </summary>
            <remarks>
            Nothing can be sent or received in or after this event.
            </remarks>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.Text">
            <summary>
            Event that is triggered when a text message is received.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.AudioStreamBegin">
            <summary>
            Event that is triggered when an audio stream begins.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.AudioFrame">
            <summary>
            Event that is triggered when an audio frame is received.
            </summary>
        </member>
        <member name="E:Ikon.Sdk.DotNet.Channel.AudioStreamEnd">
            <summary>
            Event that is triggered when an audio stream ends.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.#ctor(Ikon.Sdk.DotNet.IIkonClient,System.String)">
            <summary>
            Create a new Channel instance.
            </summary>
            <param name="ikonClient">IkonClient instance</param>
            <param name="key">Key that is set for the channel in the Portal</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.#ctor(Ikon.Sdk.DotNet.IIkonClient,Ikon.Sdk.DotNet.IChannel)">
            <summary>
            Create a new Channel instance.
            </summary>
            <param name="ikonClient">IkonClient instance</param>
            <param name="channel">IChannel instance</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.Dispose">
            <summary>
            Dispose the Channel instance.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.ConnectAsync">
            <summary>
            Connect to the Ikon server (channel).
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.SignalReady">
            <summary>
            Signal all other clients in the channel that this client is ready.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.WaitForAIAgentAsync">
            <summary>
            Wait for the AI agent client to connect to the channel and become ready.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.SendText(System.String,System.Boolean,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Send a text message to the channel.
            </summary>
            <param name="text">Text to be sent</param>
            <param name="generateChatMessage">Whether to generate UI messages to the chat UI stream</param>
            <param name="sendBackToSender">Whether to route the message also back to the sender</param>
            <param name="createdAt">Timestamp for the message. If left empty, server will set its own time to it at receive</param>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.SetState(System.String,System.Object)">
            <summary>
            Set the LLM shader state variable to the given value.
            </summary>
            <param name="key">Name of the value</param>
            <param name="value">Value</param>
            <remarks>
            Only variables defined in the LLM shader Input section can be set.
            </remarks>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.ClearState">
            <summary>
            Clear the LLM shader state.
            </summary>
            <remarks>
            State will be reset to be identical to the Input section of the LLM shader.
            </remarks>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.GenerateAnswer">
            <summary>
            Trigger the generation of an answer by the AI agent without sending any input.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.ClearMessageHistory">
            <summary>
            Clear the whole message history of the channel.
            </summary>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Channel.SendAudio(System.Memory{System.Single},System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Send audio to the channel.
            </summary>
            <param name="samples">Arbitrary length array of floating point audio samples</param>
            <param name="sampleRate">Sample rate of the audio</param>
            <param name="channels">Channel count of the audio</param>
            <param name="isFirst">Whether the first sample of the sent audio is the beginning</param>
            <param name="isLast">Whether the last sample of the sent audio is the end</param>
            <param name="id">Optional arbitrary id</param>
            <remarks>
            Any number of samples can be sent. The samples are buffered and sent in chunks to the server.
            Either the complete audio can be sent at once or it can be sent in a streaming fashion.
            Use the isFirst/isLast flags to indicate the beginning and end of, for example, a recorded sentence.
            Combination of sampleRate + channels + id is used to create unique audio streams.
            </remarks>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Sdk">
            <summary>
            Ikon AI C# SDK.
            </summary>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Sdk.ClientInfo">
            <summary>
            Information about the client that is going to connect to a space.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.ApiKey">
            <summary>
            API key for the space. Get this from the Portal.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.SpaceId">
            <summary>
            Space ID. Get this from the Portal.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.UserId">
            <summary>
            User ID. This can be an arbitrary string given by you.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.Description">
            <summary>
            Short description of the client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.DeviceId">
            <summary>
            Unique device ID of the connecting device.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.ProductId">
            <summary>
            Product code of the client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.VersionId">
            <summary>
            Version ID of the client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.InstallId">
            <summary>
            Install ID of the client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.Locale">
            <summary>
            Locale of the client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.UserType">
            <summary>
            User type of the client.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.PayloadType">
            <summary>
            Payload type of the protocol messages for the client.
            </summary>
            <remarks>
            This is for now a process wide shared setting. Only the last set value is used.
            </remarks>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.OpcodeGroupsFromServer">
            <summary>
            Opcode groups that the client wants to receive from the server.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.OpcodeGroupsToServer">
            <summary>
            Opcode groups that the client wants to send to the server.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.BackendRequestTimeout">
            <summary>
            Default timeout for backend requests in seconds.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.BackendChannelConnectTimeout">
            <summary>
            Default timeout for channel connect in seconds (backend).
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.ServerChannelConnectTimeout">
            <summary>
            Default timeout for channel connect in seconds (server).
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.IsReadyTimeout">
            <summary>
            Default timeout for calling the SignalReady method in seconds.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.UseProductionEndpoint">
            <summary>
            Whether to use the backend production endpoint or the development endpoint.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.EnableServerLogRendering">
            <summary>
            Whether to enable Ikon server log rendering at the client.
            </summary>
            <remarks>
            Works only in development environment.
            </remarks>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.LogAllBackendRequests">
            <summary>
            Whether to log all backend HTTP requests.
            </summary>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.UseLocalIkonServer">
            <summary>
            Whether to use the local Ikon server.
            </summary>
            <remarks>
            For internal testing purposes only.
            </remarks>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.LocalIkonServerHost">
            <summary>
            Host of the local Ikon server.
            </summary>
            <remarks>
            For internal testing purposes only.
            </remarks>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.LocalIkonServerPort">
            <summary>
            Port of the local Ikon server.
            </summary>
            <remarks>
            For internal testing purposes only.
            </remarks>
        </member>
        <member name="P:Ikon.Sdk.DotNet.Sdk.ClientInfo.LocalIkonServerUserId">
            <summary>
            Override user ID for the local Ikon server.
            </summary>
            <remarks>
            For internal testing purposes only.
            </remarks>
        </member>
        <member name="M:Ikon.Sdk.DotNet.Sdk.CreateIkonClientAsync(Ikon.Sdk.DotNet.Sdk.ClientInfo)">
            <summary>
            Create a new IkonClient instance that connects to the given space.
            </summary>
            <param name="clientInfo">Client info</param>
            <returns>IkonClient instance</returns>
        </member>
        <member name="T:Ikon.Sdk.DotNet.Version">
            <summary>Version class</summary>
        </member>
        <member name="F:Ikon.Sdk.DotNet.Version.VersionString">
            <summary>Version string for the library</summary>
        </member>
    </members>
</doc>
